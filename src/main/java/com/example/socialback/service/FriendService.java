package com.example.socialback.service;

import com.example.socialback.model.dao.FriendDAO;
import com.example.socialback.model.dto.FriendRequestDTO;
import com.example.socialback.model.dto.UserDTO;
import com.example.socialback.model.entity.FriendshipStatus;
import com.example.socialback.model.entity.UserEntity;
import lombok.RequiredArgsConstructor;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class FriendService {
    private final FriendDAO friendDAO;
    private static final Logger logger = LoggerFactory.getLogger(FriendService.class);

    // ‡∏î‡∏∂‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á user
    public List<UserEntity> getFriends(UUID userId) {
        return friendDAO.getFriends(userId);
    }

    // ‡∏î‡∏∂‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á user
    public List<UserEntity> getSuggestions(UUID userId) {
        return friendDAO.getSuggestions(userId);
    }

    // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
    public List<FriendRequestDTO> getRequests(UUID userId) {
        return friendDAO.getRequests(userId);
    }

    // ‡∏î‡∏∂‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á user
    public List<UserDTO> getUserFriends(UUID userId) {
        return friendDAO.getUserFriends(userId);
    }

    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö (incoming)
    public List<FriendRequestDTO> getPendingRequests(UUID userId) {
        return friendDAO.getPendingRequests(userId);
    }

    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ (outgoing) ‡πÇ‡∏î‡∏¢ user ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á
    public List<FriendRequestDTO> getSentFriendRequests(UUID userId) {
        return friendDAO.getSentFriendRequests(userId);
    }

    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    public List<UserDTO> getFriendSuggestions(UUID userId) {
        return friendDAO.getFriendSuggestions(userId);
    }

    @Transactional
    public FriendRequestResult sendFriendRequest(UUID fromUserId, UUID toUserId) {
        // üõë Validation: ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ‡∏´‡∏≤ null user
        Objects.requireNonNull(fromUserId, "fromUserId must not be null");
        Objects.requireNonNull(toUserId, "toUserId must not be null");

        // ‚ùå ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
        if (fromUserId.equals(toUserId)) {
            logger.warn("‚ö†Ô∏è User [{}] tried to send friend request to themselves!", fromUserId);
            return FriendRequestResult.INVALID_REQUEST;
        }

        logger.info("üì® User [{}] is sending a friend request to [{}]", fromUserId, toUserId);

        // üéØ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å DAO ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Response
        Optional<FriendRequestResult> result = Optional.ofNullable(friendDAO.sendFriendRequest(fromUserId, toUserId));

        if (result.isEmpty()) {
            logger.error("‚ùå Unexpected error while sending friend request from [{}] to [{}]", fromUserId, toUserId);
            return FriendRequestResult.INVALID_REQUEST;
        }

        // üü¢ Log result ‡πÅ‡∏•‡∏∞ return ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
        logger.info("‚úÖ Friend request result: [{}]", result.get());
        return result.get();
    }

    // ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
    @Transactional
    public boolean acceptFriendRequest(UUID requestId, UUID currentUserId) {
        return friendDAO.acceptFriendRequest(requestId, currentUserId);
    }

    // ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
    @Transactional
    public boolean declineFriendRequest(UUID requestId, UUID currentUserId) {
        return friendDAO.declineFriendRequest(requestId, currentUserId);
    }

    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ (‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á)
    @Transactional
    public boolean cancelFriendRequest(UUID fromUserId, UUID toUserId) {
        return friendDAO.cancelFriendRequest(fromUserId, toUserId);
    }

    // ‡∏•‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠
    @Transactional
    public void removeFriend(UUID userId, UUID friendId) {
        friendDAO.removeFriend(userId, friendId);
    }

    // üÜï ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
    public FriendshipStatus getFriendshipStatus(UUID userId, UUID targetUserId) {
        if (friendDAO.areFriends(userId, targetUserId)) {
            return FriendshipStatus.ACCEPTED; // ‚úÖ ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß
        }
        if (friendDAO.hasPendingRequest(userId, targetUserId)) {
            return FriendshipStatus.PENDING; // üì© ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà
        }
        return FriendshipStatus.NONE; // ‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
    }

}
